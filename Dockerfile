# ----------------------------------------------------
# 1. BUILDER STAGE: Prepara a imagem base PHP-FPM
# ----------------------------------------------------
# MUDAN√áA CR√çTICA: Usa PHP como base, n√£o Composer.
# O Composer ser√° instalado DENTRO desta imagem base.
FROM php:8.3-fpm-alpine AS builder

# Instala ferramentas necess√°rias (git, build-base para compila√ß√£o)
RUN apk add --no-cache git build-base \
    # Instala as depend√™ncias de desenvolvimento para a extens√£o INTL
    && apk add --no-cache icu-dev \
    # Instala a extens√£o INTL
    && docker-php-ext-install intl \
    # Instala o Composer globalmente na imagem de build
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    # Limpa depend√™ncias de build desnecess√°rias (exceto git, etc.)
    && rm -rf /var/cache/apk/*

# Instala as depend√™ncias do Composer
WORKDIR /app
COPY composer.json composer.lock ./
# O Composer √© executado em um ambiente que AGORA tem a extens√£o intl.
RUN composer install --no-dev --optimize-autoloader --no-interaction

# ----------------------------------------------------
# 2. APPLICATION STAGE: Imagem final com PHP-FPM
# ----------------------------------------------------
FROM php:8.3-fpm-alpine AS app

# Instala Nginx e as extens√µes PHP (intl j√° est√° instalada no est√°gio final da imagem base)
RUN apk add --no-cache nginx \
    # üëá Adicione as bibliotecas de runtime do ICU para resolver o Warning do intl
    && apk add --no-cache icu-libs \
    \
    # 1. Instala as depend√™ncias de compila√ß√£o para o PostgreSQL
    && apk add --no-cache --virtual .build-deps \
    postgresql-dev \
    build-base \
    \
    # 2. Compila e instala as extens√µes do PHP
    && docker-php-ext-install pdo pdo_pgsql \
    \
    # 3. Limpa as depend√™ncias de build (para reduzir o tamanho da imagem)
    && apk del .build-deps \
    && rm -rf /var/cache/apk/*

# Copia as depend√™ncias e o c√≥digo da aplica√ß√£o
WORKDIR /var/www/html
# ‚ö†Ô∏è COPIAMOS A PASTA VENDOR DO EST√ÅGIO 'builder'
COPY --from=builder /app/vendor /var/www/html/vendor
# ‚ö†Ô∏è COPIAMOS O ARQUIVO .ini DA EXTENS√ÉO INTL DO EST√ÅGIO 'builder'
COPY --from=builder /usr/local/etc/php/conf.d/docker-php-ext-intl.ini /usr/local/etc/php/conf.d/
# COPIAMOS O C√ìDIGO FONTE (que agora √© pequeno devido ao .dockerignore)
COPY . /var/www/html

RUN mkdir -p /var/www/html/tmp \
    && mkdir -p /var/www/html/logs

# Ajusta permiss√µes do CakePHP
RUN chown -R www-data:www-data /var/www/html/tmp \
    && chown -R www-data:www-data /var/www/html/logs \
    && chmod -R 775 /var/www/html/tmp \
    && chmod -R 775 /var/www/html/logs

# Configura√ß√£o b√°sica do Nginx para usar PHP-FPM
COPY deploy/nginx.conf /etc/nginx/conf.d/default.conf

# Comando de inicializa√ß√£o: Inicia o Nginx e o PHP-FPM
CMD ["sh", "-c", "php-fpm & nginx -g 'daemon off;'"]

EXPOSE 80
